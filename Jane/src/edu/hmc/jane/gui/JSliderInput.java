/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JSliderInput.java
 *
 * Created on Jul 20, 2010, 1:31:38 PM
 */

package edu.hmc.jane.gui;

import javax.swing.event.ChangeListener;


/**
 *
 * @author jpeebles
 */
public class JSliderInput extends javax.swing.JPanel {
    private int lastValue;

    /** Creates new form JSliderInput */
    public JSliderInput() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        String os = System.getProperty("os.name");
        if (os.contains("Windows")) {
            jSlider1.setPaintTicks(true);
        }
        jFormattedTextField2 = new javax.swing.JFormattedTextField();

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jFormattedTextField2.setText("50");
        jFormattedTextField2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jFormattedTextField2PropertyChange(evt);
            }
        });
        jFormattedTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFormattedTextField2KeyReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jSlider1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jFormattedTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSlider1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jFormattedTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jFormattedTextField2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jFormattedTextField2PropertyChange
        if(evt.getPropertyName().equals("text") || evt.getPropertyName().equals("value"))
            heavySync(jFormattedTextField2.getValue());
    }//GEN-LAST:event_jFormattedTextField2PropertyChange

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        heavySync(jSlider1.getValue());
    }//GEN-LAST:event_jSlider1StateChanged

    private void jFormattedTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField2KeyReleased
        lightSync(jFormattedTextField2.getText());
    }//GEN-LAST:event_jFormattedTextField2KeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField jFormattedTextField2;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables

    public void addChangeListener(ChangeListener l) {
        jSlider1.addChangeListener(l);
    }

    /**
     * @return the value
     */
    public int getValue() {
        return jSlider1.getValue();
    }

    /**
     * @param value the value to set
     */
    public void setValue(int value) {
        heavySync(value);
    }

    /**
     * @return the maximum
     */
    public int getMaximum() {
        return jSlider1.getMaximum();
    }

    /**
     * @param maximum the maximum to set
     */
    public void setMaximum(int maximum) {
        jSlider1.setMaximum(maximum);
    }

    /**
     * @return the minimum
     */
    public int getMinimum() {
        return jSlider1.getMinimum();
    }

    /**
     * @param minimum the minimum to set
     */
    public void setMinimum(int minimum) {
        jSlider1.setMinimum(minimum);
    }

    private void lightSync(Object o) {
        sync(o, false);
    }

    @Override
    public void setEnabled(boolean enabled){
        jSlider1.setEnabled(enabled);
        jFormattedTextField2.setEnabled(enabled);
        super.setEnabled(enabled);
    }

    private void heavySync(Object o) {
        sync(o, true);
    }

    private void sync(Object o, boolean heavy) {
        int i;
        try {
            if(o instanceof Integer)
                i = (Integer) o;
            else
                i = Integer.parseInt((String) o);

            if(!heavy && (i>getMaximum() || i<getMinimum()))
                return;

            if(i>getMaximum()) {
                i=getMaximum();
            } else if(i<getMinimum()) {
                i=getMinimum();
            }
        } catch (RuntimeException e) {
            if(heavy)
                i=lastValue;
            else
                return;
        }
        lastValue=i;
        setBoth(i);
    }

    private void setBoth(int i) {
        String s =jFormattedTextField2.getText();
        String si=Integer.toString(i);
        if(!s.equals(si))
            jFormattedTextField2.setValue(i);

        if(jSlider1.getValue()!=i) {
            jSlider1.setValue(i);
        }
    }
}
