package edu.hmc.jane.gui;

/*
Copyright (c) 2009, Chris Conow, Daniel Fielder, Yaniv Ovidia, Ran Libeskind-Hadas
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.
    * Neither the name of the Harvey Mudd College nor the names of its
      contributors may be used to endorse or promote products derived from this
      software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * maximumHostSwitchDistance.java
 *
 * Created on Jul 30, 2009, 1:35:18 PM
 * Modified on Jul 16, 2012, 10:27:00 AM
 */

/**
 * Editor to set the maximum allowable distance for host switches
 * @author dfielder Modified by Ki Wan Gkoo
 */
public class MaximumHostSwitchDistance extends javax.swing.JDialog {
    
    private boolean boolean_hostSwitch = true;
    private boolean boolean_infestation = false;
    private boolean boolean_failureToDiverge = true;
    private int hostswitch_limit = -1;
    private int infestation_limit = -1;
    private int backup_hostswitch_limit = -1;
    private int backup_infestation_limit = -1;
    private boolean changed = false;
    private boolean allow_editing;

    /* Creates new form maximumHostSwitchDistance */
    public MaximumHostSwitchDistance(javax.swing.JFrame owner) {
        super(owner, "Set Host Switch Distance");
        Utils.initIcons(this);
        initComponents();
        getRootPane().setDefaultButton(ok_button);
        
        host_switch_jCheckBox.setSelected(boolean_hostSwitch);
        infestation_jCheckBox.setSelected(boolean_infestation);
        failure_to_diverge_jCheckBox.setSelected(boolean_failureToDiverge);
        host_switch_jFormattedTextField.setValue(hostswitch_limit);
        infestation_jFormattedTextField.setValue(infestation_limit);
        allow_editing = true;
        
        // Making parts related to infestation invisible.
        infestation_jCheckBox.setVisible(false);
        infestation_jFormattedTextField.setVisible(false);
        failure_to_diverge_jCheckBox.setVisible(false);
        this.setSize(525,175);
    }

    public int getHostSwitchLimit() {
        return hostswitch_limit;
    }
    
    public int getInfestationLimit() {
        return infestation_limit;
    }
    
    public boolean getHostSwitchAllow() {
        return boolean_hostSwitch;
    }
    
    public boolean getInfestationAllow() {
        return boolean_infestation;
    }
    
    public boolean getFailureToDivergeAllow() {
        return boolean_failureToDiverge;
    }
    
    /* This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        host_switch_jFormattedTextField = new javax.swing.JFormattedTextField();
        cancel_button = new javax.swing.JButton();
        ok_button = new javax.swing.JButton();
        infestation_jFormattedTextField = new javax.swing.JFormattedTextField();
        host_switch_jCheckBox = new javax.swing.JCheckBox();
        infestation_jCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        failure_to_diverge_jCheckBox = new javax.swing.JCheckBox();

        setTitle("Set Host Switch Parameters");
        setLocationByPlatform(true);
        setModal(true);
        setResizable(false);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Select a maximum distance for Host Switch (-1 means infinity).");

        host_switch_jFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        host_switch_jFormattedTextField.setText("-1");

        cancel_button.setText("Cancel");
        cancel_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_buttonActionPerformed(evt);
            }
        });

        ok_button.setText("OK");
        ok_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_buttonActionPerformed(evt);
            }
        });

        infestation_jFormattedTextField.setText("-1");
        infestation_jFormattedTextField.setMinimumSize(new java.awt.Dimension(0, 0));

        host_switch_jCheckBox.setSelected(true);
        host_switch_jCheckBox.setText("Host Switch");
        host_switch_jCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                host_switch_jCheckBoxItemStateChanged(evt);
            }
        });

        infestation_jCheckBox.setText("Infestation");
        infestation_jCheckBox.setMinimumSize(new java.awt.Dimension(0, 0));
        infestation_jCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                infestation_jCheckBoxItemStateChanged(evt);
            }
        });

        jLabel1.setText("Choose whether to use Host Switch.");

        failure_to_diverge_jCheckBox.setSelected(true);
        failure_to_diverge_jCheckBox.setText("Failure to Diverge");
        failure_to_diverge_jCheckBox.setMinimumSize(new java.awt.Dimension(0, 0));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(15, 15, 15)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(failure_to_diverge_jCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(infestation_jCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(host_switch_jCheckBox))
                                .add(221, 221, 221)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(layout.createSequentialGroup()
                                            .add(6, 6, 6)
                                            .add(infestation_jFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(layout.createSequentialGroup()
                                            .add(ok_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(cancel_button)))
                                    .add(host_switch_jFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel2)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {host_switch_jCheckBox, infestation_jCheckBox}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.linkSize(new java.awt.Component[] {host_switch_jFormattedTextField, infestation_jFormattedTextField}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.linkSize(new java.awt.Component[] {jLabel1, jLabel2}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(host_switch_jCheckBox)
                    .add(host_switch_jFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(infestation_jCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(infestation_jFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(failure_to_diverge_jCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancel_button)
                    .add(ok_button))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {failure_to_diverge_jCheckBox, host_switch_jCheckBox, host_switch_jFormattedTextField, infestation_jCheckBox}, org.jdesktop.layout.GroupLayout.VERTICAL);

        layout.linkSize(new java.awt.Component[] {jLabel1, jLabel2}, org.jdesktop.layout.GroupLayout.VERTICAL);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ok_buttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ok_buttonActionPerformed
    {//GEN-HEADEREND:event_ok_buttonActionPerformed
        if (!allow_editing) {
            this.setVisible(false);
            return;
        }
        if (boolean_failureToDiverge != failure_to_diverge_jCheckBox.isSelected()) {
            changed = true;
        }
        
        boolean_hostSwitch = host_switch_jCheckBox.isSelected();
        boolean_infestation = infestation_jCheckBox.isSelected();
        boolean_failureToDiverge = failure_to_diverge_jCheckBox.isSelected();
        
        if (host_switch_jFormattedTextField.getValue() != null) {
            int candidate_value1 = ((Number)host_switch_jFormattedTextField.getValue()).intValue();

            if(candidate_value1 < -1) {
                javax.swing.JOptionPane.showMessageDialog(this, "The host switch distance must be at least -1", "Invalid value", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (hostswitch_limit != candidate_value1)
                changed = true;
            hostswitch_limit = candidate_value1;
        }
        if (infestation_jFormattedTextField.getValue() != null) {
            int candidate_value2 = ((Number)infestation_jFormattedTextField.getValue()).intValue();

            if(candidate_value2 < -1) {
                javax.swing.JOptionPane.showMessageDialog(this, "The infestation distance must be at least -1", "Invalid value", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (infestation_limit != candidate_value2)
                changed = true;
            infestation_limit = candidate_value2;
        }
        
        this.setVisible(false);
    }//GEN-LAST:event_ok_buttonActionPerformed

    private void cancel_buttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancel_buttonActionPerformed
    {//GEN-HEADEREND:event_cancel_buttonActionPerformed
        host_switch_jCheckBox.setSelected(boolean_hostSwitch);
        infestation_jCheckBox.setSelected(boolean_infestation);
        failure_to_diverge_jCheckBox.setSelected(boolean_failureToDiverge);
        host_switch_jFormattedTextField.setValue(hostswitch_limit);
        infestation_jFormattedTextField.setValue(infestation_limit);
        this.setVisible(false);
    }//GEN-LAST:event_cancel_buttonActionPerformed

    private void host_switch_jCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_host_switch_jCheckBoxItemStateChanged
        if (host_switch_jCheckBox.isSelected()) {
            host_switch_jFormattedTextField.setEnabled(true);
            host_switch_jFormattedTextField.setValue(backup_hostswitch_limit);
        } else {
            backup_hostswitch_limit = hostswitch_limit;
            host_switch_jFormattedTextField.setEnabled(false);
            host_switch_jFormattedTextField.setValue(0);
        }
    }//GEN-LAST:event_host_switch_jCheckBoxItemStateChanged

    private void infestation_jCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_infestation_jCheckBoxItemStateChanged
        if (infestation_jCheckBox.isSelected()) {
            infestation_jFormattedTextField.setEnabled(true);
            infestation_jFormattedTextField.setValue(backup_infestation_limit);
        } else {
            backup_infestation_limit = infestation_limit;
            infestation_jFormattedTextField.setEnabled(false);
            infestation_jFormattedTextField.setValue(0);
        }
    }//GEN-LAST:event_infestation_jCheckBoxItemStateChanged

    public boolean wasChanged(){
        if (changed) {
            changed = false; // reset for future changes
            return true;
        }
        return false;
    }

    public void openWithEditStatus(boolean val) {
        allow_editing = val;
        host_switch_jCheckBox.setEnabled(val);
        infestation_jCheckBox.setEnabled(val);
        failure_to_diverge_jCheckBox.setEnabled(val);
        host_switch_jFormattedTextField.setEnabled(val);
        infestation_jFormattedTextField.setEnabled(val);
        if (!host_switch_jCheckBox.isSelected())
            host_switch_jFormattedTextField.setEnabled(false);
        if (!infestation_jCheckBox.isSelected())
            infestation_jFormattedTextField.setEnabled(false);
        cancel_button.setEnabled(val);
        this.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel_button;
    private javax.swing.JCheckBox failure_to_diverge_jCheckBox;
    private javax.swing.JCheckBox host_switch_jCheckBox;
    private javax.swing.JFormattedTextField host_switch_jFormattedTextField;
    private javax.swing.JCheckBox infestation_jCheckBox;
    private javax.swing.JFormattedTextField infestation_jFormattedTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton ok_button;
    // End of variables declaration//GEN-END:variables
}
