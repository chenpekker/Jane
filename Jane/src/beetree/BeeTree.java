/**
 * BeeTree.java
 *
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 *
 * Created on Oct 18, 2010, 2:02:11 PM
 */

package beetree;

import edu.hmc.jane.ProblemInstance;
import edu.hmc.jane.io.*;
import java.awt.Color;
import javax.swing.JFileChooser;
import java.io.*;
import java.awt.Cursor;
import javax.swing.JOptionPane;
import edu.hmc.jane.gui.Design;
import edu.hmc.jane.TreeFileFilter;
import edu.hmc.jane.NexFileFilter;
import edu.hmc.jane.BothFileFilter;
import edu.hmc.jane.gui.Utils;

/**
 *
 * @author beametitiri Modified by Nicole Wein
 */
public class BeeTree extends javax.swing.JFrame {
    JFileChooser chooseTree;
    ProblemInstance prob;
    boolean fileLoaded = false;
    Design design;
    File file = null;
    String ext = ".tree";

    /**
     * Creates new form BeeTreeGUI
     */
    public BeeTree() {
        Utils.initIcons(this);
        initComponents();    
    }

    public BeeTree(Design design) {
        Utils.initIcons(this);
        this.design = design;
        initComponents();  
        changeTimeButton.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        fileChooser = new javax.swing.JFileChooser();
        treeToolbar = new javax.swing.JToolBar();
        nodeButton = new javax.swing.JButton();
        labelButton = new javax.swing.JButton();
        linkButton = new javax.swing.JButton();
        moveButton = new javax.swing.JButton();
        timeButton = new javax.swing.JButton();
        regionButton = new javax.swing.JButton();
        eraseButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        fileToolbar = new javax.swing.JToolBar();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panel = new beetree.BeePanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        solverButton = new javax.swing.JButton();
        changeTimeButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        JMenu = new javax.swing.JMenu();
        newButton = new javax.swing.JMenuItem();
        OpenButton = new javax.swing.JMenuItem();
        SaveMenuButton = new javax.swing.JMenuItem();
        SaveAsButton = new javax.swing.JMenuItem();
        SolverMenuButton = new javax.swing.JMenuItem();
        ExitButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setForeground(java.awt.Color.white);
        setLocationByPlatform(true);
        setPreferredSize(new java.awt.Dimension(1280, 773));

        treeToolbar.setFloatable(false);
        treeToolbar.setRollover(true);

        nodeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BeeTrees/source/data/child.png"))); // NOI18N
        nodeButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        nodeButton.setFocusable(false);
        nodeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nodeButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        nodeButton.setMaximumSize(new java.awt.Dimension(33, 33));
        nodeButton.setMinimumSize(new java.awt.Dimension(33, 33));
        nodeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nodeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nodeButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                nodeButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nodeButtonMouseEntered(evt);
            }
        });
        treeToolbar.add(nodeButton);

        labelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BeeTrees/source/data/name.png"))); // NOI18N
        labelButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        labelButton.setFocusable(false);
        labelButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        labelButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        labelButton.setMaximumSize(new java.awt.Dimension(33, 33));
        labelButton.setMinimumSize(new java.awt.Dimension(33, 33));
        labelButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        labelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelButtonMouseEntered(evt);
            }
        });
        treeToolbar.add(labelButton);

        linkButton.setBackground(new java.awt.Color(204, 204, 204));
        linkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BeeTrees/source/data/linkNodes.png"))); // NOI18N
        linkButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        linkButton.setFocusable(false);
        linkButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        linkButton.setMaximumSize(new java.awt.Dimension(33, 33));
        linkButton.setMinimumSize(new java.awt.Dimension(33, 33));
        linkButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linkButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                linkButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                linkButtonMouseEntered(evt);
            }
        });
        treeToolbar.add(linkButton);

        moveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BeeTrees/source/data/move.png"))); // NOI18N
        moveButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        moveButton.setFocusable(false);
        moveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        moveButton.setMaximumSize(new java.awt.Dimension(33, 33));
        moveButton.setMinimumSize(new java.awt.Dimension(33, 33));
        moveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moveButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                moveButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                moveButtonMouseEntered(evt);
            }
        });
        treeToolbar.add(moveButton);

        timeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BeeTrees/source/data/time.png"))); // NOI18N
        timeButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        timeButton.setFocusable(false);
        timeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        timeButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        timeButton.setMaximumSize(new java.awt.Dimension(33, 33));
        timeButton.setMinimumSize(new java.awt.Dimension(33, 33));
        timeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        timeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                timeButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                timeButtonMouseEntered(evt);
            }
        });
        treeToolbar.add(timeButton);

        regionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BeeTrees/source/data/region.png"))); // NOI18N
        regionButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        regionButton.setFocusable(false);
        regionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        regionButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        regionButton.setMaximumSize(new java.awt.Dimension(33, 33));
        regionButton.setMinimumSize(new java.awt.Dimension(33, 33));
        regionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        regionButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                regionButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                regionButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                regionButtonMouseEntered(evt);
            }
        });
        treeToolbar.add(regionButton);

        eraseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BeeTrees/source/data/eraseNode.png"))); // NOI18N
        eraseButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        eraseButton.setFocusable(false);
        eraseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        eraseButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        eraseButton.setMaximumSize(new java.awt.Dimension(33, 33));
        eraseButton.setMinimumSize(new java.awt.Dimension(33, 33));
        eraseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        eraseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eraseButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                eraseButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                eraseButtonMouseEntered(evt);
            }
        });
        treeToolbar.add(eraseButton);

        clearButton.setBackground(new java.awt.Color(204, 204, 204));
        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BeeTrees/source/data/clear.png"))); // NOI18N
        clearButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        clearButton.setFocusable(false);
        clearButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        clearButton.setMaximumSize(new java.awt.Dimension(33, 33));
        clearButton.setMinimumSize(new java.awt.Dimension(33, 33));
        clearButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                clearButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clearButtonMouseEntered(evt);
            }
        });
        treeToolbar.add(clearButton);

        fileToolbar.setFloatable(false);
        fileToolbar.setRollover(true);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BeeTrees/source/data/save.png"))); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        saveButton.setMaximumSize(new java.awt.Dimension(27, 27));
        saveButton.setMinimumSize(new java.awt.Dimension(27, 27));
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                saveButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                saveButtonMouseEntered(evt);
            }
        });
        fileToolbar.add(saveButton);

        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BeeTrees/source/data/load.png"))); // NOI18N
        loadButton.setFocusable(false);
        loadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        loadButton.setMaximumSize(new java.awt.Dimension(27, 27));
        loadButton.setMinimumSize(new java.awt.Dimension(27, 27));
        loadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                loadButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                loadButtonMouseEntered(evt);
            }
        });
        fileToolbar.add(loadButton);

        jScrollPane1.setBackground(Color.WHITE);

        panel.setToolTipText("");
        panel.setPreferredSize(new java.awt.Dimension(700, 500));

        org.jdesktop.layout.GroupLayout panelLayout = new org.jdesktop.layout.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1207, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 610, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(panel);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setLabelFor(panel);
        jLabel1.setText("HOST");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setLabelFor(panel);
        jLabel2.setText("PARASITE");

        solverButton.setText("Load to Solver");
        solverButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        solverButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        solverButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                solverButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                solverButtonMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                solverButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                solverButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                solverButtonMouseEntered(evt);
            }
        });

        changeTimeButton.setText("Change Number of Time Zones");
        changeTimeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changeTimeButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                changeTimeButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                changeTimeButtonMouseEntered(evt);
            }
        });

        JMenu.setText("File");

        newButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.META_MASK));
        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        JMenu.add(newButton);

        OpenButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.META_MASK));
        OpenButton.setText("Open...");
        OpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenButtonActionPerformed(evt);
            }
        });
        JMenu.add(OpenButton);

        SaveMenuButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.META_MASK));
        SaveMenuButton.setText("Save");
        SaveMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuButtonActionPerformed(evt);
            }
        });
        JMenu.add(SaveMenuButton);

        SaveAsButton.setText("Save As...");
        SaveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsButtonActionPerformed(evt);
            }
        });
        JMenu.add(SaveAsButton);

        SolverMenuButton.setText("Load to Solver");
        SolverMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SolverMenuButtonActionPerformed(evt);
            }
        });
        JMenu.add(SolverMenuButton);

        ExitButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        ExitButton.setText("Exit Tree Editor");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });
        JMenu.add(ExitButton);

        jMenuBar1.add(JMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(294, 294, 294)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(fileToolbar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 203, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(changeTimeButton)))
                        .add(0, 0, Short.MAX_VALUE)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(229, 229, 229)
                        .add(solverButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(212, 212, 212))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(treeToolbar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 245, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(142, 142, 142)))
                .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(284, 284, 284))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel1)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(solverButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel2)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, treeToolbar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                    .add(layout.createSequentialGroup()
                        .add(fileToolbar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(changeTimeButton)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 0, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                .add(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public BeePanel getPanel() {
        return panel;
    }
    
    public String getExt() {
        return ext;
    }
    
    public void setExt(String newExt) {
        ext = newExt;
    }
    
    /**
     * Lightens clear button
     */
    public void releaseClear() {
        clearButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/clear.png")));
    }

    /**
     * Darkens clear button
     */
    public void pressClear() {
        clearButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/clearD.png")));
    }

    /**
     * Lightens add node button
     */
    public void releaseNode() {
        nodeButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/child.png")));
    }

    /**
     * Darkens add node button
     */
    public void pressNode() {
        nodeButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/childD.png")));
    }

    /**
     * Lightens erase button.
     */
    public void releaseErase() {
        eraseButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource(
                    "/BeeTrees/source/data/eraseNode.png")));
    }

    /**
     * Darkens erase button.
     */
    public void pressErase() {
        eraseButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource(
                    "/BeeTrees/source/data/eraseNodeD.png")));
    }

    /**
     * Lightens add link button
     */
    public void releaseLink() {
        linkButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource(
                    "/BeeTrees/source/data/linkNodes.png")));
    }

    /**
     * Darkens add link button
     */
    public void pressLink() {
        linkButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource(
                    "/BeeTrees/source/data/linkNodesD.png")));
    }

    /**
     * Lightens time button
     */
    public void releaseTime() {
        timeButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/time.png")));
        changeTimeButton.setVisible(false);
        changeTimeButton.setEnabled(false);
    }

    /**
     * Darkens time button
     */
    public void pressTime() {
        timeButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/timeD.png")));
        changeTimeButton.setVisible(true);
        changeTimeButton.setEnabled(true);
        changeTimeButton.setText("Change Number of Time Zones");
    }

    /**
     * Lightens region button
     */
    public void releaseRegion() {
        regionButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/region.png")));
        changeTimeButton.setVisible(false);
        changeTimeButton.setEnabled(false);
    }

    /**
     * Darkens region button
     */
    public void pressRegion() {
        regionButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/regionD.png")));
        if (!panel.getAllZero()) {
            changeTimeButton.setVisible(true);
            changeTimeButton.setEnabled(true);
            changeTimeButton.setText("Edit Region Switching Costs");
        }
    }

    /**
     * Lightens label button
     */
    public void releaseLabel() {
        labelButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/name.png")));
    }

    /**
     * Darkens label button
     */
    public void pressLabel() {
        labelButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/nameD.png")));
    }
    
    /**
     * Darkens move button
     */
    public void pressMove() {
        moveButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/moveD.png")));
    }
    
    /**
     * Lightens label button
     */
    public void releaseMove() {
        moveButton.setIcon(
            new javax.swing.ImageIcon(
                getClass().getResource("/BeeTrees/source/data/move.png")));
    }
    
    public javax.swing.JButton getSaveButton() {
        return saveButton;
    }
    
    public javax.swing.JButton getChangeTimeButton() {
        return changeTimeButton;
    }

    private void clearButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseClicked
        setFrame();
        panel.setState(BeePanel.CLEAR_STATE);
    }//GEN-LAST:event_clearButtonMouseClicked

    private void nodeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nodeButtonMouseClicked
        setFrame();
        panel.setState(BeePanel.NODE_STATE);
    }//GEN-LAST:event_nodeButtonMouseClicked

    private void eraseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eraseButtonMouseClicked
        setFrame();
        panel.setState(BeePanel.ERASE_STATE);
    }//GEN-LAST:event_eraseButtonMouseClicked

    private void linkButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkButtonMouseClicked
        setFrame();
        panel.setState(BeePanel.LINK_STATE);
    }//GEN-LAST:event_linkButtonMouseClicked

    private void labelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelButtonMouseClicked
        setFrame();
        panel.setState(BeePanel.LABEL_STATE);
    }//GEN-LAST:event_labelButtonMouseClicked

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        save();
    }//GEN-LAST:event_saveButtonMouseClicked

    private void labelCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_labelCheckBoxStateChanged
    }//GEN-LAST:event_labelCheckBoxStateChanged

    private void loadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadButtonMouseClicked
        loadFile();       
    }//GEN-LAST:event_loadButtonMouseClicked

    private void saveButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_saveButtonMouseExited

    private void loadButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_loadButtonMouseExited

    private void clearButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_clearButtonMouseEntered

    private void clearButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_clearButtonMouseExited

    private void saveButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseEntered
        if (!panel.getSaved()) {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_saveButtonMouseEntered

    private void loadButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadButtonMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_loadButtonMouseEntered

    private void nodeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nodeButtonMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_nodeButtonMouseEntered

    private void eraseButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eraseButtonMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_eraseButtonMouseEntered

    private void linkButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkButtonMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_linkButtonMouseEntered

    private void labelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelButtonMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_labelButtonMouseEntered

    private void nodeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nodeButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_nodeButtonMouseExited

    private void eraseButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eraseButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_eraseButtonMouseExited

    private void linkButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_linkButtonMouseExited

    private void labelButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_labelButtonMouseExited

    private void timeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeButtonMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_timeButtonMouseEntered

    private void timeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_timeButtonMouseExited

    private void regionButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regionButtonMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_regionButtonMouseEntered

    private void regionButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regionButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_regionButtonMouseExited

    private void timeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeButtonMouseClicked
        setFrame();
        panel.setState(BeePanel.TIME_STATE);
        panel.timeZoneInit();
    }//GEN-LAST:event_timeButtonMouseClicked

    private void regionButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regionButtonMouseClicked
        setFrame();
        panel.setState(BeePanel.REGION_STATE);
    }//GEN-LAST:event_regionButtonMouseClicked

    private void solverButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solverButtonMouseClicked
        loadToSolver();
    }//GEN-LAST:event_solverButtonMouseClicked

    private void solverButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solverButtonMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_solverButtonMouseEntered

    private void solverButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solverButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_solverButtonMouseExited

    private void solverButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solverButtonMouseReleased
        solverButton.setBorder(javax.swing.BorderFactory.createBevelBorder(
            javax.swing.border.BevelBorder.RAISED));
    }//GEN-LAST:event_solverButtonMouseReleased

    private void solverButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solverButtonMousePressed
        solverButton.setBorder(javax.swing.BorderFactory.createBevelBorder(
            javax.swing.border.BevelBorder.LOWERED));
    }//GEN-LAST:event_solverButtonMousePressed

    private void OpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenButtonActionPerformed
        loadFile();
    }//GEN-LAST:event_OpenButtonActionPerformed

    private void SolverMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SolverMenuButtonActionPerformed
        loadToSolver();
    }//GEN-LAST:event_SolverMenuButtonActionPerformed

    private void SaveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsButtonActionPerformed
        saveAs();
    }//GEN-LAST:event_SaveAsButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        panel.quit();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void SaveMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuButtonActionPerformed
        save();
    }//GEN-LAST:event_SaveMenuButtonActionPerformed

    private void moveButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveButtonMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_moveButtonMouseEntered

    private void moveButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_moveButtonMouseExited

    private void moveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveButtonMouseClicked
        setFrame();
        panel.setState(BeePanel.MOVE_STATE);
    }//GEN-LAST:event_moveButtonMouseClicked

    private void changeTimeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeTimeButtonMouseClicked
        panel.timeRegButtonClicked();
    }//GEN-LAST:event_changeTimeButtonMouseClicked

    private void changeTimeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeTimeButtonMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_changeTimeButtonMouseEntered

    private void changeTimeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeTimeButtonMouseExited
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_changeTimeButtonMouseExited

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        design.runBeeTree();
    }//GEN-LAST:event_newButtonActionPerformed

    // used stackoverflow answer by Lokesh Kumar
    public void saveAs() {
        setFrame();
        fileChooser.resetChoosableFileFilters();
        TreeFileFilter treeFilter = new TreeFileFilter();
        NexFileFilter nexFilter = new NexFileFilter();
        fileChooser.addChoosableFileFilter(treeFilter);
        fileChooser.addChoosableFileFilter(nexFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        
        if (ext == ".nex" || ext == ".NEX")
            fileChooser.setFileFilter(nexFilter);
        else
            fileChooser.setFileFilter(treeFilter);
        
        if (file != null) {
            String path = file.getAbsolutePath();
            String newPath = path;
            
            if (path.endsWith(".tree") || path.endsWith(".TREE"))
                newPath = path.substring(0, path.length()-5);
            else if (path.endsWith(".nex") || path.endsWith(".NEX"))
                newPath = path.substring(0, path.length()-4);
            
            File newFile = new File(newPath);
            fileChooser.setSelectedFile(newFile);
        }

        int returnVal = fileChooser.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String extension = fileChooser.getFileFilter().getDescription();
            file = fileChooser.getSelectedFile();
            String path = file.getAbsolutePath();
            
            // Warns about overwriting file if necessary
            int nameLength = file.getName().length();
            int fullLength = path.length();
            int dif = fullLength - nameLength;
            String upDirPath = path.substring(0, dif);
            File newFile = new File(upDirPath);
            String[] fileList = newFile.list();
            
            if (extension.equals(".tree"))
                ext = ".tree";
            else if (extension.equals(".nex"))
                ext = ".nex";
            
            String fileWExt = file.getName() + ext;

            for (int i = 0; i < fileList.length; i++) {
                if (fileList[i].equals(fileWExt)) {
                    int option = JOptionPane.showConfirmDialog(
                                    this, fileWExt + " already exists. "
                                        + "Would you like to overwrite it?",
                                    "", JOptionPane.YES_NO_OPTION);
                    if (option == JOptionPane.NO_OPTION) {
                        saveAs();
                    }
                }
            }

            if (ext.equals(".tree")) {
                try {
                    panel.saveTrees(file);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(
                        this, "problem accessing file" + path, "",
                        JOptionPane.ERROR_MESSAGE);
                }
            } else if (ext.equals(".nex")) {
                try {
                    panel.saveTreesNex(file);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(
                        this, "problem accessing file" + path, "",
                        JOptionPane.ERROR_MESSAGE);
                }
            } 
        }
    }
    
    public void save() {
        if (file != null) {
            String path = file.getAbsolutePath();
            if (ext == ".tree") {
                try {
                    panel.saveTrees(file);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(
                        this, "problem accessing file" + path, "",
                        JOptionPane.ERROR_MESSAGE);
                }
            } else if (ext == ".nex") {
                try {
                    panel.saveTreesNex(file);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(
                        this, "problem accessing file" + path, "",
                        JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            saveAs();
        }
    }
    
    public void loadFile() {
        int option = 0;
        if (panel.getHost().getNodes().size() != 1
                || panel.getParasite().getNodes().size() != 1
                || !panel.getAllZero()) {
            option = JOptionPane.showConfirmDialog(
                        this,
                        "Loading a new tree will cause you to lose all "
                            + "current data.\nContinue?",
                        "Continue?", JOptionPane.YES_NO_OPTION);
        }

        if (!fileLoaded
                && (option == JOptionPane.YES_OPTION
                        || (panel.getHost().getNodes().size() == 1
                            && panel.getParasite().getNodes().size() == 1))) {
            fileChooser.resetChoosableFileFilters();
            TreeFileFilter treeFilter = new TreeFileFilter();
            NexFileFilter nexFilter = new NexFileFilter();
            BothFileFilter bothFilter = new BothFileFilter();
            fileChooser.addChoosableFileFilter(bothFilter);
            fileChooser.addChoosableFileFilter(treeFilter);
            fileChooser.addChoosableFileFilter(nexFilter);
            fileChooser.setAcceptAllFileFilterUsed(false);
            fileChooser.setFileFilter(bothFilter);
            int returnVal = fileChooser.showOpenDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile();
                String path = fileChooser.getSelectedFile().getAbsolutePath();
                TreeFileReader nr = null;

                try {
                    ext = ".nex";
                    nr = new NexusFileReader(path, true);
                    int nameLength = file.getName().length();
                    int fullLength = path.length();
                    int dif = fullLength - nameLength;
                    setTitle(path.substring(dif, fullLength));

                    if (!((NexusFileReader) nr).isNexus()) {
                        nr = new NewNexusFileReader(path);
                        if (!((NewNexusFileReader) nr).isNewNexus()) {
                            ext = ".tree";
                            panel.loadTrees(file);
                            return;
                        } else {
                            JOptionPane.showMessageDialog(
                                this,
                                "This file is in CoRe-PA's nexus format. \n"
                                    + "Only the trees' structures, tip names, "
                                    + "and tip mappings will be processed.",
                                "Warning", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } catch (java.io.FileNotFoundException e) {
                    JOptionPane.showMessageDialog(
                        this, "The file " + path + " does not exist.",
                        "File not found", JOptionPane.ERROR_MESSAGE);

                    return;
                } catch (java.io.IOException e) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Error reading input file: " + e.getLocalizedMessage(),
                        "Error reading input file", JOptionPane.ERROR_MESSAGE);
                    
                    return;
                }
                
                try {
                    prob = nr.readProblem();
                    panel.convertTrees(prob);
                } catch (FileFormatException e) {
                    javax.swing.JOptionPane.showMessageDialog(
                        this,
                        "Error in input file "
                            + fileChooser.getSelectedFile().getName()
                            + "\n" + e.getMessage(),
                        "Malformed Input File",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                } catch (java.io.IOException e) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Error reading input file: " + e.getLocalizedMessage(),
                        "Error reading input file", JOptionPane.ERROR_MESSAGE);

                    return;
                }
            } 
        }
    }
    
    /**
     * Saves trees and loads them from tree builder to Jane
     */
    public void loadToSolver() {
        if (panel.getAllZero() == false && panel.getAllAssigned() == false) {
            JOptionPane.showConfirmDialog(
                null,
                "Either all host nodes must be assigned to nonzero regions " 
                    + "or all must be assigned to region 0.",
                "", JOptionPane.DEFAULT_OPTION);
            return;
        }
        
        if (!panel.getSaved())
            save();
        
        if (file != null) {
            String path = file.getAbsolutePath();
            design.loadWarning();
            
            if (path.endsWith(".tree") || path.endsWith(".TREE"))
                path = path.substring(0, path.length()-5);
            else if (path.endsWith(".nex") || path.endsWith(".NEX"))
                path = path.substring(0, path.length()-4);
            
            design.loadTrees(file, path+ext,ext);
            design.toFront();
        }
    }
    
    public void setFrame() {
        panel.setFrame(this);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ExitButton;
    private javax.swing.JMenu JMenu;
    private javax.swing.JMenuItem OpenButton;
    private javax.swing.JMenuItem SaveAsButton;
    private javax.swing.JMenuItem SaveMenuButton;
    private javax.swing.JMenuItem SolverMenuButton;
    private javax.swing.JButton changeTimeButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton eraseButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JToolBar fileToolbar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton labelButton;
    private javax.swing.JButton linkButton;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton moveButton;
    private javax.swing.JMenuItem newButton;
    private javax.swing.JButton nodeButton;
    private beetree.BeePanel panel;
    private javax.swing.JButton regionButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton solverButton;
    private javax.swing.JButton timeButton;
    private javax.swing.JToolBar treeToolbar;
    // End of variables declaration//GEN-END:variables
}
